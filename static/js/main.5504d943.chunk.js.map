{"version":3,"sources":["components/forms/AddUserForm.js","components/forms/EditUserForm.js","components/tables/UserTable.js","App.js","serviceWorker.js","index.js"],"names":["AddUserForm","props","initialFormState","id","name","taskname","useState","task","setUser","handleInputChange","event","target","value","onSubmit","preventDefault","addUser","className","type","onChange","EditUserForm","currentUser","useEffect","updateUser","onClick","setEditing","UserTable","tasks","length","map","key","editRow","deleteUser","colSpan","App","setUsers","setCurrentUser","editing","updatedUser","filter","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.5504d943.chunk.js","sourcesContent":["import React, { useState } from 'react'\r\n\r\nconst AddUserForm = props => {\r\n\tconst initialFormState = { id: null, name: '', taskname: '' }\r\n\tconst [task, setUser] = useState(initialFormState)\r\n\r\n\tconst handleInputChange = event => {\r\n\t\tconst { name, value } = event.target\r\n\r\n\t\tsetUser({ ...task, [name]: value })\r\n\t}\r\n\r\n\treturn (\r\n\t\t<form\r\n\t\t\tonSubmit={event => {\r\n\t\t\t\tevent.preventDefault()\r\n\t\t\t\tif (!task.name || !task.taskname) return\r\n\r\n\t\t\t\tprops.addUser(task)\r\n\t\t\t\tsetUser(initialFormState)\r\n\t\t\t}}\r\n\t\t>\r\n\t\t\t<label className=\"mr-15\">Name</label>\r\n\t\t\t<input className=\"mr-15\" type=\"text\" name=\"name\" value={task.name} onChange={handleInputChange} />\r\n\t\t\t<label className=\"mr-15\">Priority</label>\r\n\t\t\t<input className=\"mr-15\" type=\"text\" name=\"taskname\" value={task.taskname} onChange={handleInputChange} />\r\n\t\t\t<button>Add new task</button>\r\n\t\t</form>\r\n\t)\r\n}\r\n\r\nexport default AddUserForm\r\n","import React, { useState, useEffect } from 'react'\r\n\r\nconst EditUserForm = props => {\r\n  const [task, setUser] = useState(props.currentUser)\r\n\r\n  useEffect(\r\n    () => {\r\n      setUser(props.currentUser)\r\n    },\r\n    [props]\r\n  )\r\n\r\n  const handleInputChange = event => {\r\n    const { name, value } = event.target\r\n\r\n    setUser({ ...task, [name]: value })\r\n  }\r\n\r\n  return (\r\n    <form\r\n      onSubmit={event => {\r\n        event.preventDefault()\r\n\r\n        props.updateUser(task.id, task)\r\n      }}\r\n    >\r\n      <label>Name</label>\r\n      <input type=\"text\" name=\"name\" value={task.name} onChange={handleInputChange} />\r\n      <label>Task</label>\r\n      <input type=\"text\" name=\"taskname\" value={task.taskname} onChange={handleInputChange} />\r\n      <button>Update task</button>\r\n      <button onClick={() => props.setEditing(false)} className=\"button muted-button\">\r\n        Cancel\r\n      </button>\r\n    </form>\r\n  )\r\n}\r\n\r\nexport default EditUserForm\r\n","import React from 'react'\r\n\r\nconst UserTable = props => (\r\n  <table>\r\n    <thead>\r\n      <tr>\r\n        <th>Task</th>\r\n        <th>Priority</th>\r\n        <th>Actions</th>\r\n      </tr>\r\n    </thead>\r\n    <tbody>\r\n      {props.tasks.length > 0 ? (\r\n        props.tasks.map(task => (\r\n          <tr key={task.id}>\r\n            <td>{task.name}</td>\r\n            <td>{task.taskname}</td>\r\n            <td>\r\n              <button\r\n                onClick={() => {\r\n                  props.editRow(task)\r\n                }}\r\n              >\r\n                Edit\r\n              </button>\r\n              <button\r\n                onClick={() => props.deleteUser(task.id)}\r\n              >\r\n                Delete\r\n              </button>\r\n            </td>\r\n          </tr>\r\n        ))\r\n      ) : (\r\n          <tr>\r\n            <td colSpan={3}>No tasks</td>\r\n          </tr>\r\n        )}\r\n    </tbody>\r\n  </table>\r\n)\r\n\r\nexport default UserTable\r\n","import React, { useState, Fragment } from 'react'\r\nimport AddUserForm from './components/forms/AddUserForm'\r\nimport EditUserForm from './components/forms/EditUserForm'\r\nimport UserTable from './components/tables/UserTable'\r\n\r\nconst App = () => {\r\n\r\n  const tasksData = [\r\n    { id: 1, name: 'Pasear al perro', taskname: 'No urgente' },\r\n    { id: 2, name: 'Estudiar React', taskname: 'Urgente' },\r\n    { id: 3, name: 'Lavar la ropa', taskname: 'Urgente' },\r\n  ]\r\n\r\n  const initialFormState = { id: null, name: '', taskname: '' }\r\n\r\n  const [tasks, setUsers] = useState(tasksData)\r\n  const [currentUser, setCurrentUser] = useState(initialFormState)\r\n  const [editing, setEditing] = useState(false)\r\n\r\n  // Create\r\n  const addUser = task => {\r\n    task.id = tasks.length + 1\r\n    setUsers([...tasks, task])\r\n  }\r\n  // Delete\r\n  const deleteUser = id => {\r\n    setEditing(false)\r\n    setUsers(tasks.filter(task => task.id !== id))\r\n  }\r\n  //Update\r\n  const updateUser = (id, updatedUser) => {\r\n    setEditing(false)\r\n    setUsers(tasks.map(task => (task.id === id ? updatedUser : task)))\r\n  }\r\n\r\n  const editRow = task => {\r\n    setEditing(true)\r\n    setCurrentUser({ id: task.id, name: task.name, taskname: task.taskname })\r\n  }\r\n\r\n  return (\r\n    <div className=\"container\">\r\n      <h1>To-Do App</h1>\r\n      <div>\r\n        <div className=\"row\">\r\n          {editing ? (\r\n            <Fragment>\r\n              <h2>Edit task</h2>\r\n              <EditUserForm\r\n                editing={editing}\r\n                setEditing={setEditing}\r\n                currentUser={currentUser}\r\n                updateUser={updateUser}\r\n              />\r\n            </Fragment>\r\n          ) : (\r\n              <Fragment>\r\n                <h2>Add task</h2>\r\n                <AddUserForm addUser={addUser} />\r\n              </Fragment>\r\n            )}\r\n        </div>\r\n        <div className=\"row\">\r\n          <h2>View Tasks</h2>\r\n          <UserTable tasks={tasks} editRow={editRow} deleteUser={deleteUser} />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default App\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and tasks)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}